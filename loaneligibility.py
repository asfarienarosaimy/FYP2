import streamlit as st
import numpy as np
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt

model= joblib.load('lr_model.joblib')

st.title('Loan Eligibility Prediction:bank:')

Gender= st.selectbox('Gender',('Male','Female'))
Married= st.selectbox('Married',('No','Yes'))
Dependents= st.selectbox('Number Of Dependents',('0','1','2','3 or More Dependents'))
Education= st.selectbox('Education status',('Graduate','Not Graduate'))
Self_Employed= st.selectbox('Self Employed',('No','Yes'))
ApplicantIncome= st.number_input('Applicant Income',0)
CoapplicantIncome= st.number_input('Coapplicant Income',0)
LoanAmount= st.number_input('Loan Amount',0)
Loan_Amount_Term= st.select_slider('Loan Amount Term',['1 YEAR','3 YEARS','5 YEARS','7 YEARS',
                                   '10 YEARS','15 YEARS','20 YEARS','25 YEARS','30 YEARS','40 YEARS'])
Credit_History= st.select_slider('Credit History 1 for Good 0 for Bad',[0,1])
Property_Area= st.selectbox('Area of Property',('Urban','Rural','Semiurban'))


columns= ['Gender','Married','Dependents','Education','Self_Employed','ApplicantIncome','CoapplicantIncome',
          'LoanAmount','Loan_Amount_Term','Credit_History','Property_Area']
  
def predict():
    col= np.array([Gender,Married,Dependents,Education,Self_Employed,
                   ApplicantIncome,CoapplicantIncome,LoanAmount,Loan_Amount_Term,Credit_History,Property_Area])
    data= pd.DataFrame([col],columns=columns)
    prediction= model.predict(data)[0]

    if prediction == 1:
        st.success('üéâ Congratulations! You can get the loan. :thumbsup:')
    else:
        st.error('‚ùå Sorry, you cannot get the loan. :thumbsdown:')

model = ...  
input_data = ...  

explainer = shap.Explainer(model)
shap_values = explainer(input_data)

st.subheader("Explanation for Prediction")
st.write("Below are the key factors influencing your loan decision:")
shap.plots.waterfall(shap_values[0])  

plt.savefig('shap_plot.png')
st.image('shap_plot.png')

features = ["Credit Score", "Income", "Debt-to-Income Ratio", "Loan Amount"]
importances = [0.35, 0.25, 0.20, 0.15]

fig, ax = plt.subplots()
pd.Series(importances, index=features).sort_values().plot.barh(ax=ax, color="skyblue")
ax.set_title("Feature Importance")
ax.set_xlabel("Relative Importance")

# Display in Streamlit
st.pyplot(fig)

credit_score = 580
income = 4000
debt_to_income_ratio = 0.5

st.subheader("Recommendations for Improvement")
if credit_score < 650:
    st.warning("üìâ Your credit score is low. Try to improve it by reducing credit usage and paying bills on time.")
if debt_to_income_ratio > 0.4:
    st.warning("üí∞ Your debt-to-income ratio is too high. Consider reducing your existing debt.")
if income < 5000:
    st.warning("üìà A higher monthly income would improve your loan eligibility.")

probability = 0.87 

if prediction == 1:
    st.info(f"The model is **{probability*100:.2f}%** confident that your loan is approved.")
else:
    st.info(f"The model is **{probability*100:.2f}%** confident that your loan is not approved.")

st.sidebar.subheader("Eligibility Criteria")
st.sidebar.markdown("""
- Minimum credit score: 650
- Maximum debt-to-income ratio: 40%
- Stable monthly income: $5000+
""")

st.subheader("Your Input Details")
st.json({
    "Credit Score": credit_score,
    "Monthly Income": income,
    "Debt-to-Income Ratio": debt_to_income_ratio
})

st.sidebar.info("**Disclaimer:** The prediction is generated by a machine learning model and should not be considered as financial advice.")

m = st.markdown("""
<style>
div.stButton > button:first-child {
    background-color: #0099ff;
    color:#ffffff;
}
div.stButton > button:hover {
    background-color: #00ff00;
    color:#ff0000;
    }
</style>""", unsafe_allow_html=True)


st.button('Predict',on_click=predict)
